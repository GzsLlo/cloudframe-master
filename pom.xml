<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">


	<!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。
	坐标包括group ID,artifact ID和version。-->
	<parent>
		<!--被继承的父项目的全球唯一标识符 -->
		<groupId>org.springframework.boot</groupId>
		<!--被继承的父项目的构件标识符 -->
		<artifactId>spring-boot-starter-parent</artifactId>
		<!--被继承的父项目的版本 -->
		<version>2.1.3.RELEASE</version>
	</parent>


	<!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，
	这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。-->
	<modelVersion>4.0.0</modelVersion>

	<!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app -->
	<groupId>com.ai.cloudframe</groupId>

	<!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个
        特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，
        源 码，二进制发布和WARs等。 -->
	<artifactId>cloudframe-master</artifactId>

	<!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 -->
	<packaging>pom</packaging>

	<!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 -->
	<version>0.0.1-SNAPSHOT</version>

	<!--项目的名称, Maven产生的文档用 -->
	<name>cloudframe-master</name>

	<!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标
        签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 -->
	<description>ai cloud frame</description>


	<!--项目开发者列表 -->
	<developers>
		<!--某个项目开发者的信息 -->
		<developer>
			<!--项目开发者的全名 -->
      <name>tangsz</name>
			<!--项目开发者的email -->
			<email>187342430@qq.com</email>
		</developer>
	</developers>


	<!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 -->
	<modules>
		<module>cloudframe-common</module>
		<module>cloudframe-gateway</module>
		<module>cloudframe-generator</module>
		<module>cloudframe-provider</module>
		<module>cloudframe-provider-api</module>
		<module>cloudframe-web</module>
		<module>cloudframe-eureka</module>
	</modules>


	<!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。
	格式是<name>value</name>。 -->
	<properties>
		<java.version>1.8</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<druid.version>1.1.10</druid.version>
		<mysql.driver.version>8.0.16</mysql.driver.version>
		<mybatis-plus-boot-starter.version>3.1.0</mybatis-plus-boot-starter.version>
		<spring-boot-starter.version>2.5.12</spring-boot-starter.version>
		<lombok.version>1.18.4</lombok.version>
		<commons.lang.version>2.6</commons.lang.version>
		<spring-cloud.version>Greenwich.RELEASE</spring-cloud.version>
		<swagger.version>2.9.2</swagger.version>
		<spring-alibaba-cloud.version>0.9.0.RELEASE</spring-alibaba-cloud.version>
		<apollo.version>1.3.0</apollo.version>
		<servicecomb.version>0.4.0</servicecomb.version>
	</properties>


	<!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact
        ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。 -->
	<dependencyManagement>
		<dependencies>

			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-alibaba-dependencies</artifactId>
				<version>${spring-alibaba-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter</artifactId>
				<version>${spring-boot-starter.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-test</artifactId>
				<version>${spring-boot-starter.version}</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>druid-spring-boot-starter</artifactId>
				<version>${druid.version}</version>
			</dependency>

			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId>
				<scope>runtime</scope>
				<version>${mysql.driver.version}</version>
			</dependency>

			<dependency>
				<groupId>com.baomidou</groupId>
				<artifactId>mybatis-plus-boot-starter</artifactId>
				<version>${mybatis-plus-boot-starter.version}</version>
			</dependency>

			<dependency>
				<groupId>com.baomidou</groupId>
				<artifactId>mybatis-plus-generator</artifactId>
				<version>${mybatis-plus-boot-starter.version}</version>
			</dependency>

			<dependency>
				<groupId>com.baomidou</groupId>
				<artifactId>mybatis-plus-annotation</artifactId>
				<version>${mybatis-plus-boot-starter.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
				<version>${spring-boot-starter.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-actuator</artifactId>
				<version>${spring-boot-starter.version}</version>
			</dependency>

			<dependency>
				<groupId>com.baomidou</groupId>
				<artifactId>mybatis-plus-core</artifactId>
				<version>${mybatis-plus-boot-starter.version}</version>
			</dependency>

			<dependency>
				<groupId>com.baomidou</groupId>
				<artifactId>mybatis-plus-extension</artifactId>
				<version>${mybatis-plus-boot-starter.version}</version>
			</dependency>

			<dependency>
				<groupId>org.projectlombok</groupId>
				<artifactId>lombok</artifactId>
				<version>${lombok.version}</version>
				<scope>provided</scope>
			</dependency>

			<dependency>
				<groupId>commons-lang</groupId>
				<artifactId>commons-lang</artifactId>
				<version>${commons.lang.version}</version>
			</dependency>

			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger2</artifactId>
				<version>${swagger.version}</version>
			</dependency>

			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger-ui</artifactId>
				<version>${swagger.version}</version>
			</dependency>

			<dependency>
				<groupId>com.ctrip.framework.apollo</groupId>
				<artifactId>apollo-client</artifactId>
				<version>${apollo.version}</version>
			</dependency>

			<dependency>
				<groupId>com.ctrip.framework.apollo</groupId>
				<artifactId>apollo-core</artifactId>
				<version>${apollo.version}</version>
		  </dependency>

			<dependency>
				<groupId>org.apache.servicecomb.pack</groupId>
				<artifactId>omega-spring-starter</artifactId>
				<version>${servicecomb.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.servicecomb.pack</groupId>
				<artifactId>omega-spring-cloud-eureka-starter</artifactId>
				<version>${servicecomb.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.servicecomb.pack</groupId>
				<artifactId>omega-transport-resttemplate</artifactId>
				<version>${servicecomb.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.servicecomb.pack</groupId>
				<artifactId>omega-transport-feign</artifactId>
				<version>${servicecomb.version}</version>
			</dependency>

		</dependencies>
	</dependencyManagement>


	<!--构建项目所需要的信息。参见build元素 -->
		<!--<build>-->
		<!--<plugins>-->
			<!--<plugin>-->
				<!--<groupId>org.springframework.boot</groupId>-->
				<!--<artifactId>spring-boot-maven-plugin</artifactId>-->
			<!--</plugin>-->
		<!--</plugins>-->
	<!--</build>-->

</project>
